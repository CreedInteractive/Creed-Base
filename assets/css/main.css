@import url(https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,300);
@font-face {
  font-family: 'Proxima Nova Bold';
  src: url("../../fonts/ProximaNova-Xbold-webfont.eot");
  src: url("../fonts/ProximaNova-Xbold-webfont.eot?#iefix") format("embedded-opentype"), url("../fonts/ProximaNova-Xbold-webfont.woff") format("woff"), url("../fonts/ProximaNova-Xbold-webfont.ttf") format("truetype"), url("../fonts/ProximaNova-Xbold-webfont.svg#proxima_nova_thextrabold") format("svg");
  font-weight: normal;
  font-style: normal; }
@font-face {
  font-family: 'Proxima Nova';
  src: url("../fonts/ProximaNova-Reg-webfont.eot");
  src: url("../fonts/ProximaNova-Reg-webfont.eot?#iefix") format("embedded-opentype"), url("../fonts/ProximaNova-Reg-webfont.woff") format("woff"), url("../fonts/ProximaNova-Reg-webfont.ttf") format("truetype"), url("../fonts/ProximaNova-Reg-webfont.svg#proxima_nova_rgregular") format("svg");
  font-weight: normal;
  font-style: normal; }
/*  ==========================
      CONTENT
    ========================== */
.container {
  background: #ccc;
  margin: auto;
  width: 960px; }

main, .main {
  margin-left: 250px;
  padding: 0 2rem; }

/*  ==========================
      NAVIGATION
    ========================== */
nav, .navigation {
  background: #f8f8f8;
  border-right: 1px solid #ececec;
  height: 100%;
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  width: 250px;
  z-index: 5;
  /* base styles for ul, li */
  /* level styles */ }
  nav ul, .navigation ul {
    margin: 0;
    padding: 0; }
    nav ul li, .navigation ul li {
      display: block;
      margin: 0;
      padding: 0;
      list-style: none; }
  nav > ul > li span, .navigation > ul > li span {
    background: #fda80e;
    display: block;
    line-height: 3.6rem;
    padding: 0 2rem;
    text-transform: uppercase; }
  nav > ul > li > ul > li, .navigation > ul > li > ul > li {
    line-height: 1.6rem; }
    nav > ul > li > ul > li a, .navigation > ul > li > ul > li a {
      background: #f8f8f8;
      color: #fda80e;
      display: block;
      padding: 1rem 2rem;
      text-decoration: none; }
      nav > ul > li > ul > li a:hover, .navigation > ul > li > ul > li a:hover {
        background: #dfdfdf;
        color: white; }

[class^="row-"],
[class*="row-"] {
  margin-top: 1rem;
  margin-bottom: 1rem;
  display: -webkit-flex;
  -webkit-flex-flow: row wrap; }
  [class^="row-"]:after,
  [class*="row-"]:after {
    content: " ";
    display: table;
    clear: both; }

[class^="col"],
[class*="col"] {
  box-sizing: border-box;
  color: #adadad;
  float: left;
  min-height: 1px;
  padding-left: 1rem;
  padding-right: 1rem;
  position: relative;
  text-align: left;
  width: 100%;
  background: #fafafa;
  border: 1px #e4e4e4 solid;
  border-radius: 5px; }

/* Changing Susy default global settings */
/* Makes border-box properties */
*, *:before, *:after {
  box-sizing: border-box; }

[class^="row"] > .col:first-child {
  margin-left: 0; }
[class^="row"] > .col:last-child {
  float: right;
  margin-right: 0; }

.row-xs-2 > .col {
  width: 13.7931%;
  float: left;
  margin-right: 3.44828%; }

.row-xs-3 > .col {
  width: 21.05263%;
  float: left;
  margin-right: 5.26316%; }

.row-xs-4 > .col {
  width: 28.57143%;
  float: left;
  margin-right: 7.14286%; }

.row-xs-6 > .col {
  width: 44.44444%;
  float: left;
  margin-right: 11.11111%; }

.row-xs-4-2-6 > .col:nth-child(1) {
  width: 32%;
  float: left;
  margin-right: 2%; }
.row-xs-4-2-6 > .col:nth-child(2) {
  width: 16%;
  float: left;
  margin-right: 2%; }
.row-xs-4-2-6 > .col:nth-child(3) {
  width: 48%;
  float: right;
  margin-right: 0; }

html {
  font-size: 62.5%;
  height: 100%; }

body {
  font-family: 'Proxima Nova', sans-serif;
  font-size: 1.4rem;
  margin: 0; }

h1 {
  color: #fda80e;
  font-size: 4.8rem;
  font-family: 'Proxima Nova Bold', sans-serif;
  line-height: 2rem; }

h2 {
  color: #fda80e;
  font-size: 3.6rem;
  font-family: 'Proxima Nova Bold', sans-serif;
  padding: 1rem 0rem 1rem 0rem; }

h3 {
  font-size: 3.0rem;
  color: #fda80e; }

h5 {
  font-size: 1.8rem;
  font-family: 'Proxima Nova Bold', sans-serif;
  color: #fda80e; }

h1, h2 {
  text-transform: uppercase; }

img {
  display: block;
  clear: right;
  max-width: 100%;
  max-height: auto; }

p {
  font-size: 1.6rem;
  letter-spacing: 0.05rem; }

a {
  color: #169bbf;
  transition: .3s all ease; }
  a:hover {
    color: #d9f4fb; }



/*# sourceMappingURL=data:application/json;base64, */
